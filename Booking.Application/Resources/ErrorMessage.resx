<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationRequired" xml:space="preserve">
    <value>Authentication required</value>
  </data>
  <data name="BookingAlreadyExists" xml:space="preserve">
    <value>BookingAlreadyExists</value>
  </data>
  <data name="BookingNotFound" xml:space="preserve">
    <value>Booking not found</value>
  </data>
  <data name="CardTypeAlreadyExists" xml:space="preserve">
    <value>Card type already exists</value>
  </data>
  <data name="CardTypeNotFound" xml:space="preserve">
    <value>Card type not found</value>
  </data>
  <data name="CityAlreadyExists" xml:space="preserve">
    <value>City already exists</value>
  </data>
  <data name="CityNotFound" xml:space="preserve">
    <value>City not found</value>
  </data>
  <data name="CountryAlreadyExists" xml:space="preserve">
    <value>Country already exists</value>
  </data>
  <data name="CountryNotFound" xml:space="preserve">
    <value>Country not found</value>
  </data>
  <data name="CurrencyAlreadyExists" xml:space="preserve">
    <value>Currency already exists</value>
  </data>
  <data name="CurrencyNotFound" xml:space="preserve">
    <value>Currency not found</value>
  </data>
  <data name="EmailIsNotCorrect" xml:space="preserve">
    <value>Email is not correct</value>
  </data>
  <data name="FaceBookAuthFailed" xml:space="preserve">
    <value>Facebook authentication failed</value>
  </data>
  <data name="FacilityAlreadyExists" xml:space="preserve">
    <value>Facility already exists </value>
  </data>
  <data name="FacilityGroupAlreadyExists" xml:space="preserve">
    <value>Facility group already exists</value>
  </data>
  <data name="FacilityGroupNotFound" xml:space="preserve">
    <value>Facility group not fsound</value>
  </data>
  <data name="FacilityNotFound" xml:space="preserve">
    <value>Facility Not Found</value>
  </data>
  <data name="FailedToGetResponseFromFaceBook" xml:space="preserve">
    <value>Failed to get response from Facebook</value>
  </data>
  <data name="FaqAlreadyExists" xml:space="preserve">
    <value>Faq already exists</value>
  </data>
  <data name="FaqNotFound" xml:space="preserve">
    <value>Faq not found</value>
  </data>
  <data name="GoogleAuthFailed" xml:space="preserve">
    <value>Google authentication failed.</value>
  </data>
  <data name="HotelAlreadyExists" xml:space="preserve">
    <value>Hotel already exists</value>
  </data>
  <data name="HotelNotFound" xml:space="preserve">
    <value>Hotel not found</value>
  </data>
  <data name="InfoCellNotFound" xml:space="preserve">
    <value>	Info cell not found</value>
  </data>
  <data name="InternalServerError" xml:space="preserve">
    <value>Internal server error</value>
  </data>
  <data name="InvalidClientRequest" xml:space="preserve">
    <value>Invalid client request</value>
  </data>
  <data name="InvalidParameters" xml:space="preserve">
    <value>Invalid parameters</value>
  </data>
  <data name="InvalidScoreParametr" xml:space="preserve">
    <value>Invalid score parametr</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Invalid token</value>
  </data>
  <data name="NearPlaceNotFound" xml:space="preserve">
    <value>Near place not found</value>
  </data>
  <data name="NoAvailableRooms" xml:space="preserve">
    <value>No available rooms</value>
  </data>
  <data name="NoDataAvailableInSocialAuthentication" xml:space="preserve">
    <value>No data available in social authentication</value>
  </data>
  <data name="PasswordIsWrong" xml:space="preserve">
    <value>Password is wrong</value>
  </data>
  <data name="PasswordNotEqualsPasswordConfirm" xml:space="preserve">
    <value>Password and password confirm is not equal</value>
  </data>
  <data name="PayMethodAlreadyExists" xml:space="preserve">
    <value>PayMethod Already Exists</value>
  </data>
  <data name="PayMethodNotFound" xml:space="preserve">
    <value>PayMethod not found</value>
  </data>
  <data name="ReasonAlreadyExists" xml:space="preserve">
    <value>Reason already exists</value>
  </data>
  <data name="ReasonNotFound" xml:space="preserve">
    <value>Reason not found</value>
  </data>
  <data name="RegistrationCodeNotFound" xml:space="preserve">
    <value>Registration code not found</value>
  </data>
  <data name="ReviewAlreadyExists" xml:space="preserve">
    <value>Review already exists</value>
  </data>
  <data name="ReviewNotFound" xml:space="preserve">
    <value>Review not found</value>
  </data>
  <data name="RoleAlreadyExists" xml:space="preserve">
    <value>Role already exists</value>
  </data>
  <data name="RoleNotFound" xml:space="preserve">
    <value>Role not found</value>
  </data>
  <data name="RoomAlreadyExists" xml:space="preserve">
    <value>Room already exists</value>
  </data>
  <data name="RoomNotFound" xml:space="preserve">
    <value>Room not found</value>
  </data>
  <data name="RoomsNotFound" xml:space="preserve">
    <value>Rooms not found</value>
  </data>
  <data name="SomeOfFacilitiesNotFound" xml:space="preserve">
    <value>Some of facilities not found</value>
  </data>
  <data name="StorageServerError" xml:space="preserve">
    <value>Storage server error</value>
  </data>
  <data name="TopicAlreadyExists" xml:space="preserve">
    <value>Topic already exists</value>
  </data>
  <data name="TopicNotFound" xml:space="preserve">
    <value>Topic not found</value>
  </data>
  <data name="UserAlreadyExists" xml:space="preserve">
    <value>User already exists</value>
  </data>
  <data name="UserAlreadyExistsThisRole" xml:space="preserve">
    <value>User already exists this role</value>
  </data>
  <data name="UserIsNotMatched" xml:space="preserve">
    <value>User is not matched</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="UserProfileAlreadyExists" xml:space="preserve">
    <value>User profile already exists</value>
  </data>
  <data name="UserProfileNotFound" xml:space="preserve">
    <value>User profile not found</value>
  </data>
  <data name="UserWasntCreated" xml:space="preserve">
    <value>User wasn't created</value>
  </data>
</root>